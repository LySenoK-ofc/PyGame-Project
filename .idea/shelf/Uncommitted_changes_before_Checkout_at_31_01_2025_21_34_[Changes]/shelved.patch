Index: screens.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import sys\r\n\r\nimport pygame.sprite\r\n\r\nfrom load_image_func import load_image\r\nfrom constant import FPS, HEIGHT, WIDTH, CELL_SIZE\r\nfrom sprite_groups import *\r\n\r\nfrom Board_class import Board\r\nfrom Map_constructor import generate_level, load_level, Map_constructor\r\n\r\npygame.init()\r\n\r\nsize = WIDTH, HEIGHT\r\nscreen = pygame.display.set_mode(size)\r\n\r\nclock = pygame.time.Clock()\r\n\r\n\r\ndef terminate():\r\n    pygame.quit()\r\n    sys.exit()\r\n\r\n\r\nclass Button(pygame.sprite.Sprite):\r\n    button_images = {'settings': 'assets/buttons/settings_btn.png',\r\n                     'pause': 'assets/buttons/pause_btn.png',\r\n                     'return': 'assets/buttons/return_btn.png',\r\n                     'sketch': 'assets/buttons/sketch_btn.png'}\r\n\r\n    def __init__(self, x, y, type_btn, command):\r\n        super().__init__(buttons)\r\n        self.image = load_image(self.button_images[type_btn])\r\n        self.rect = self.image.get_rect()\r\n        self.rect.x = x\r\n        self.rect.y = y\r\n        self.command = command\r\n\r\n    def update(self, *args, **kwargs):\r\n        if args and args[0].type == pygame.MOUSEBUTTONDOWN and self.rect.collidepoint(args[0].pos):\r\n            map_tiles.empty()\r\n            map_objects.empty()\r\n            animated_map_objects.empty()\r\n            buttons.empty()\r\n            level_doors.empty()\r\n            if self.command == 'open_pick_level_screen':\r\n                pick_level_screen()\r\n            if self.command == 'open_main_lobby':\r\n                main_lobby()\r\n            if self.command == 'quit':\r\n                terminate()\r\n            if self.command == 'open_dictionary_screen':\r\n                dictionary_screen()\r\n            if self.command == 'open_options_screen':\r\n                options_screen()\r\n\r\n\r\nclass Door_lock(pygame.sprite.Sprite):\r\n    def __init__(self, x, y):\r\n        super().__init__(level_doors)\r\n        self.image = load_image('assets/doors/lock.png')\r\n        self.rect = self.image.get_rect()\r\n        self.rect.x = x\r\n        self.rect.y = y\r\n\r\n\r\nclass Level_door(pygame.sprite.Sprite):\r\n    def __init__(self, x, y, lock=True):\r\n        super().__init__(level_doors)\r\n        self.image = load_image('assets/doors/close_door.png')\r\n        self.rect = self.image.get_rect()\r\n        self.rect.x = x\r\n        self.rect.y = y\r\n        self.lock = lock\r\n        self.open = False\r\n        if lock:\r\n            self.lock = Door_lock(x + 110, y + 150)\r\n\r\n    def update(self, *args, **kwargs):\r\n        if args and args[0].type == pygame.MOUSEBUTTONDOWN and self.rect.collidepoint(args[0].pos) and not self.lock:\r\n            self.image = load_image('assets/doors/open_door.png')\r\n            self.open = True\r\n\r\n    def check(self):\r\n        if self.open:\r\n            return True\r\n        return False\r\n\r\n\r\ndef main_lobby():\r\n    font = pygame.font.Font('assets/pi-sheng.regular.otf', 64)\r\n    background = load_image('assets/backgrounds/main_background.png')\r\n\r\n    start_game_btn = Button(900, 300, 'sketch', 'open_pick_level_screen')\r\n    dictionary_btn = Button(900, 425, 'sketch', 'open_dictionary_screen')\r\n    options_btn = Button(900, 550, 'sketch', 'open_options_screen')\r\n    quit_btn = Button(900, 675, 'sketch', 'quit')\r\n\r\n    start_game_text = font.render('Continue', True, 'black')\r\n    dictionary_text = font.render('Dictionary', True, 'black')\r\n    options_text = font.render('Options', True, 'black')\r\n    quit_text = font.render('Quit', True, 'black')\r\n\r\n    pygame.display.set_caption('Главное Лобби')\r\n\r\n    while True:\r\n        for event in pygame.event.get():\r\n            if event.type == pygame.QUIT:\r\n                terminate()\r\n            if event.type == pygame.MOUSEBUTTONDOWN:\r\n                buttons.update(event)\r\n\r\n        screen.blit(background, (0, 0))\r\n        buttons.draw(screen)\r\n        screen.blit(start_game_text, (930, 315))\r\n        screen.blit(dictionary_text, (930, 440))\r\n        screen.blit(options_text, (930, 565))\r\n        screen.blit(quit_text, (930, 690))\r\n\r\n        pygame.display.flip()\r\n        clock.tick(FPS)\r\n\r\n\r\ndef dictionary_screen():\r\n    pygame.display.set_caption('Бестинарий')\r\n\r\n    return_btn = Button(1300, 650, 'return', 'open_main_lobby')\r\n\r\n    while True:\r\n        for event in pygame.event.get():\r\n            if event.type == pygame.QUIT:\r\n                terminate()\r\n            if event.type == pygame.MOUSEBUTTONDOWN:\r\n                if event.button == 1:\r\n                    buttons.update(event)\r\n        screen.fill('black')\r\n        buttons.draw(screen)\r\n\r\n        pygame.display.flip()\r\n\r\n\r\ndef options_screen():\r\n    pygame.display.set_caption('Бестинарий')\r\n\r\n    return_btn = Button(1300, 650, 'return', 'open_main_lobby')\r\n\r\n    while True:\r\n        for event in pygame.event.get():\r\n            if event.type == pygame.QUIT:\r\n                terminate()\r\n            if event.type == pygame.MOUSEBUTTONDOWN:\r\n                if event.button == 1:\r\n                    buttons.update(event)\r\n        screen.fill('black')\r\n        buttons.draw(screen)\r\n\r\n        pygame.display.flip()\r\n\r\n\r\ndef pick_level_screen():\r\n    font = pygame.font.Font('assets/pi-sheng.regular.otf', 64)\r\n    background = load_image('assets/backgrounds/levels_background.png')\r\n\r\n    pygame.display.set_caption('Выбор уровня')\r\n\r\n    door1 = Level_door(174, 120, False)\r\n    door2 = Level_door(606, 120)\r\n    door3 = Level_door(1038, 120)\r\n    door4 = Level_door(375, 470)\r\n    door5 = Level_door(825, 470)\r\n\r\n    text_level1 = font.render('Level 1', False, 'black')\r\n    text_level2 = font.render('Level 2', True, 'black')\r\n    text_level3 = font.render('Level 3', True, 'black')\r\n    text_level4 = font.render('Level 4', True, 'black')\r\n    text_level5 = font.render('Level 5', True, 'black')\r\n\r\n    return_btn = Button(1200, 500, 'return', 'open_main_lobby')\r\n\r\n    while True:\r\n        for event in pygame.event.get():\r\n            if event.type == pygame.QUIT:\r\n                terminate()\r\n            if event.type == pygame.MOUSEBUTTONDOWN:\r\n                if event.button == 1:\r\n                    level_doors.update(event)\r\n                    for door in level_doors:\r\n                        if type(door) == Level_door and door.check():\r\n                            buttons.empty()\r\n                            game_screen()\r\n                    buttons.update(event)\r\n\r\n        screen.blit(background, (0, 3))\r\n\r\n        level_doors.draw(screen)\r\n        buttons.draw(screen)\r\n\r\n        screen.blit(text_level1, (220, 60))\r\n        screen.blit(text_level2, (650, 60))\r\n        screen.blit(text_level3, (1100, 60))\r\n        screen.blit(text_level4, (420, 415))\r\n        screen.blit(text_level5, (870, 415))\r\n\r\n        pygame.display.flip()\r\n        clock.tick(FPS)\r\n\r\n\r\ndef game_screen():\r\n    board = Board(6, 5, (75 * 6), (75 * 4), CELL_SIZE)\r\n\r\n    generate_level(load_level('map.txt'))\r\n    Map_constructor(WIDTH, HEIGHT, board)\r\n    board.render('assets/map_tiles/Tiles/FieldsTile_47.png')\r\n\r\n    return_btn = Button(1350, 10, 'return', 'open_pick_level_screen')\r\n\r\n    while True:\r\n        for event in pygame.event.get():\r\n            if event.type == pygame.QUIT:\r\n                terminate()\r\n            if event.type == pygame.MOUSEBUTTONDOWN:\r\n                if event.button == 1:\r\n                    buttons.update(event)\r\n        map_tiles.draw(screen)\r\n        map_objects.draw(screen)\r\n        animated_map_objects.update()\r\n        animated_map_objects.draw(screen)\r\n        buttons.draw(screen)\r\n        pygame.display.flip()\r\n\r\n        print(map_tiles, map_objects, animated_map_objects)\r\n        clock.tick(FPS)\r\n
===================================================================
diff --git a/screens.py b/screens.py
--- a/screens.py	(revision 4db8efd0f71c1e74af7da0464b109d4a0c2882ba)
+++ b/screens.py	(date 1738348393737)
@@ -230,3 +230,4 @@
 
         print(map_tiles, map_objects, animated_map_objects)
         clock.tick(FPS)
+game_screen()
\ No newline at end of file
