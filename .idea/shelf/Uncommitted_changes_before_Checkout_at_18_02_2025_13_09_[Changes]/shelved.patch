Index: Waves_manager.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from random import randrange\r\n\r\nimport pygame\r\n\r\nimport constant\r\nfrom Mobs import Slime, Skeleton, Orc, ArmoredOrc, EliteOrc, RiderOrc, ArmoredSkeleton, GreateswordSkeleton, Werewolf, \\\r\n    Werebear\r\nfrom constant import WIDTH, CELL_SIZE, TOP, CURRENT_LVL, WAVES\r\nfrom sounds_manager import sounds\r\nfrom sprite_groups import groups\r\n\r\n\r\nclass WaveManager:\r\n    def __init__(self, board):\r\n        self.wave = 0  # Текущая волна\r\n\r\n        try:\r\n            self.waves = WAVES[CURRENT_LVL]\r\n        except KeyError:\r\n            self.waves = []\r\n\r\n        self.enemies = pygame.sprite.Group()  # Группа спрайтов для мобов волны\r\n        self.last_spawn_time = pygame.time.get_ticks()\r\n        self.spawn_index = 0  # Индекс текущего моба в волне\r\n        self.current_wave_done = False  # Флаг окончания волны\r\n        self.wave_running = False  # Флаг проигрывания волны\r\n        self.mobs = {'Slime': Slime, 'Skeleton': Skeleton, 'Orc': Orc,\r\n                     'ArmoredOrc': ArmoredOrc, 'EliteOrc': EliteOrc, 'RiderOrc': RiderOrc,\r\n                     'ArmoredSkeleton': ArmoredSkeleton, 'GreateswordSkeleton': GreateswordSkeleton,\r\n                     'Werewolf': Werewolf, 'Werebear': Werebear}\r\n\r\n        self.board = board\r\n\r\n    def start_wave(self):\r\n        \"\"\"Проверяет состояние текущей волны и переходит к следующей. Запускает новую волну.\"\"\"\r\n        if self.current_wave_done and len(self.enemies) == 0:\r\n            constant.cash += 150  # Награда за волну\r\n            self.wave += 1\r\n            self.current_wave_done = False\r\n            self.wave_running = False\r\n        else:\r\n            if not self.wave_running:\r\n                if self.wave < len(self.waves):\r\n                    self.spawn_index = 0\r\n                    self.wave_running = True\r\n                    pygame.mixer.Channel(1).play(sounds['wave_start'])\r\n                else:\r\n                    constant.GAME_MODE = 'WIN'\r\n\r\n    def spawn_enemy(self):\r\n        \"\"\"Создаёт мобов текущей волны.\"\"\"\r\n        if self.wave >= len(self.waves) or not self.wave_running:\r\n            return  # Все волны пройдены\r\n\r\n        now = pygame.time.get_ticks()\r\n        wave_data = self.waves[self.wave]\r\n\r\n        if now - self.last_spawn_time >= wave_data['interval']:  # Спавним разные типы мобов с интервалом\r\n            self.last_spawn_time = now\r\n\r\n            try:\r\n                if self.spawn_index < len(wave_data['enemies']):\r\n                    enemy_class = self.mobs[wave_data['enemies'][self.spawn_index][0]]\r\n                    count = wave_data['enemies'][self.spawn_index][1]\r\n\r\n                    for _ in range(count):  # Спавним мобов\r\n                        self.spawn_mob(enemy_class)\r\n\r\n                    self.spawn_index += 1  # Переходим к следующему типу мобов в волне\r\n\r\n                if self.spawn_index >= len(wave_data['enemies']):\r\n                    self.current_wave_done = True  # Все мобы из волны заспавнены\r\n            except Exception:\r\n                pass\r\n\r\n    def spawn_mob(self, enemy_class):\r\n        row = randrange(0, self.board.height)\r\n        setting = ((WIDTH + randrange(100, 250), row * CELL_SIZE + self.board.top + CELL_SIZE / 2),\r\n                   groups['rows'][row])\r\n        enemy = enemy_class(*setting)\r\n        self.enemies.add(enemy)\r\n
===================================================================
diff --git a/Waves_manager.py b/Waves_manager.py
--- a/Waves_manager.py	(revision 897a7a483b7d9ad682ea16f64e3ce309ec5f507f)
+++ b/Waves_manager.py	(date 1739872392709)
@@ -5,7 +5,7 @@
 import constant
 from Mobs import Slime, Skeleton, Orc, ArmoredOrc, EliteOrc, RiderOrc, ArmoredSkeleton, GreateswordSkeleton, Werewolf, \
     Werebear
-from constant import WIDTH, CELL_SIZE, TOP, CURRENT_LVL, WAVES
+from constant import WIDTH, CURRENT_LVL, WAVES
 from sounds_manager import sounds
 from sprite_groups import groups
 
@@ -75,7 +75,7 @@
 
     def spawn_mob(self, enemy_class):
         row = randrange(0, self.board.height)
-        setting = ((WIDTH + randrange(100, 250), row * CELL_SIZE + self.board.top + CELL_SIZE / 2),
+        setting = ((WIDTH + randrange(100, 250), row * self.board.cell_size + self.board.top + self.board.cell_size / 2),
                    groups['rows'][row])
         enemy = enemy_class(*setting)
         self.enemies.add(enemy)
Index: Game.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from random import choice\r\n\r\nimport constant\r\nimport screens\r\nimport pytmx\r\n\r\nfrom animated_objects import AnimatedMapObject\r\nfrom Mobs import Slime, Skeleton, Orc, ArmoredOrc, EliteOrc, RiderOrc, ArmoredSkeleton, GreateswordSkeleton, Werewolf, \\\r\n    Werebear\r\nfrom Units import Archer, Knight, Wizard, Priest, ArmoredAxeman, SwordsMan, KnightTemplar, Lancer\r\nfrom Waves_manager import WaveManager\r\nfrom constant import FPS, WIDTH, HEIGHT, reset_state, CELL_SIZE, CURRENT_LVL\r\nfrom Board import Board\r\nfrom map_creator import draw_map, get_objects\r\nfrom sale_func import sale_unit\r\nfrom shop_units import Shop\r\nfrom show_unit_info import show_info\r\nfrom sounds_manager import play_background_music, play_sound, sounds\r\nfrom sprite_groups import groups\r\nimport pygame\r\nimport pygame.freetype\r\nfrom all_animations import ANIMATIONS\r\n\r\npygame.init()\r\nsize = WIDTH, HEIGHT\r\nscreen = pygame.display.set_mode(size)\r\nbackground = pygame.Surface((WIDTH, HEIGHT))\r\n\r\ntry:\r\n    tmx_data = pytmx.load_pygame(f\"assets/maps/{CURRENT_LVL}map.tmx\")\r\nexcept FileNotFoundError:\r\n    screens.main_lobby(True)\r\n\r\npygame.display.set_caption('demo_project')\r\n\r\n\r\ndef alpha_convert():\r\n    \"\"\"Конвертирует изображение в альфу\"\"\"\r\n    try:\r\n        for key, val in ANIMATIONS.items():\r\n            convert_val = {}\r\n            for key1 in val.keys():\r\n                convert_val[key1] = [frame.convert_alpha() if bool(frame.get_flags() & pygame.SRCALPHA) else frame\r\n                                     for frame in val[key1]]\r\n            ANIMATIONS[key] = convert_val\r\n    except Exception as er:\r\n        print(f'Произошла ошибка! \"{er}\"')\r\n\r\n\r\ndef step_sound_func():\r\n    \"\"\"Запускает звуки ходьбы\"\"\"\r\n    try:\r\n        if not pygame.mixer.Channel(2).get_busy():\r\n            if len(groups['mobs']) > 0:\r\n                sound = choice([pygame.mixer.Sound('assets/sounds/entities_sounds/step.wav'),\r\n                                pygame.mixer.Sound('assets/sounds/entities_sounds/step1.wav')])\r\n                pygame.mixer.Channel(2).play(sound)\r\n                pygame.mixer.Channel(2).set_volume(0.1)\r\n        else:\r\n            if len(groups['mobs']) == 0:\r\n                pygame.mixer.Channel(2).stop()\r\n    except Exception as er:\r\n        print(f'Произошла ошибка! \"{er}\"')\r\n\r\n\r\ndef info_drawer(info_text, info_font, x, y, line_spacing):\r\n    \"\"\"Рисуем инфу по юниту\"\"\"\r\n    for line in info_text:\r\n        text_surface, text_rect = info_font.render(line, (100, 255, 100))\r\n        text_rect.x, text_rect.y = x, y\r\n        screen.blit(text_surface, text_rect)\r\n        y += text_rect.height + line_spacing\r\n\r\n\r\ndef system_info_drawer(money_font, hp_font):\r\n    \"\"\"Рисуем Монеты и Хп Игрока\"\"\"\r\n    text_surface, text_rect = money_font.render(f\"Деньги:{constant.cash}\", (100, 255, 100))  # Деньги\r\n    text_rect.x, text_rect.y = 10, 10\r\n    screen.blit(text_surface, text_rect)\r\n\r\n    text_surface, text_rect = hp_font.render(f\"Хп:{constant.hp}\", (100, 255, 100))  # Хп\r\n    text_rect.x, text_rect.y = 10, text_rect.height * 2\r\n    screen.blit(text_surface, text_rect)\r\n\r\n\r\ndef entity_drawer():\r\n    \"\"\"Рисуем динамические спрйты\"\"\"\r\n    groups['characters'].draw(screen)\r\n    groups['mobs'].draw(screen)\r\n    groups['shells'].draw(screen)\r\n    groups['shop_units'].draw(screen)\r\n    groups['drag_units'].draw(screen)\r\n    groups['animated_map_objects'].draw(screen)\r\n\r\n\r\ndef spawn_shop_unit(shop_unit_coord, board):\r\n    \"\"\"Ставим юнитов в магазин\"\"\"\r\n    units = [(Knight, ANIMATIONS['KNIGHT'], 90, 45),\r\n             (Archer, ANIMATIONS['ARCHER'], 50, 25),\r\n             (Wizard, ANIMATIONS['WIZARD'], 85, 42),\r\n             (Priest, ANIMATIONS['PRIEST'], 80, 40),\r\n             (ArmoredAxeman, ANIMATIONS['ARMORED_AXEMAN'], 70, 35),\r\n             (SwordsMan, ANIMATIONS['SWORDSMAN'], 80, 40),\r\n             (KnightTemplar, ANIMATIONS['KNIGHT_TEMPLAR'], 100, 40)]\r\n\r\n    for i, arg in enumerate(units):\r\n        unit, anim, price, sale = arg\r\n        Shop(unit, (shop_unit_coord[i][0] + CELL_SIZE / 2, shop_unit_coord[i][1] + CELL_SIZE / 2), anim, board,\r\n             price=price, sale=sale)\r\n\r\n\r\ndef spawn_lancers(board):\r\n    \"\"\"Спавнит конницу\"\"\"\r\n    for i in range(1, board.height + 1):\r\n        Lancer((board.left - CELL_SIZE / 2, i * CELL_SIZE + board.top - CELL_SIZE / 2),\r\n               group_of_row=groups['rows'][i - 1])\r\n\r\n\r\ndef spaw_anim_object(anim_objects):\r\n    \"\"\"Устанавливаем анимированные объекты.\"\"\"\r\n    for obj in anim_objects:\r\n        try:\r\n            AnimatedMapObject((obj[0], obj[1]), obj[2].upper())\r\n        except Exception as er:\r\n            print(f'Произошла ошибка! \"{er}\"')\r\n\r\n\r\ndef game_loop():\r\n    \"\"\"Основной игровой цикл\"\"\"\r\n    # Сбрасываем статистику\r\n    reset_state()\r\n\r\n    # Музыка уровня\r\n    play_background_music(f'assets/sounds/background_sounds/lvl/{CURRENT_LVL}_sound.mp3')\r\n    # Звук запуска уровня\r\n    play_sound(sounds['game_start'])\r\n\r\n    # Конвертируем в альфу\r\n    alpha_convert()\r\n\r\n    # Парсим tmx файл(карту)\r\n    static_background = draw_map(tmx_data)\r\n    user_cells_coord, shop_unit_coord, anim_objects = get_objects(tmx_data)\r\n\r\n    # Поле для расстановки юнитов\r\n    board = Board(75, user_cells_coord)\r\n\r\n    # Ставим объекты на метки\r\n    spawn_shop_unit(shop_unit_coord, board)\r\n    spawn_lancers(board)\r\n    spaw_anim_object(anim_objects)\r\n\r\n    # Темный фильтр\r\n    dark_filter = pygame.Surface((WIDTH, HEIGHT), pygame.SRCALPHA)\r\n    dark_filter.fill((0, 0, 0, 70))\r\n\r\n    # Менеджер волн\r\n    wave_manager = WaveManager(board)\r\n\r\n    clock = pygame.time.Clock()\r\n\r\n    SPAWN_WAVE_EVENT = pygame.USEREVENT + 1\r\n    pygame.time.set_timer(SPAWN_WAVE_EVENT, 1500)\r\n\r\n    money_font = pygame.freetype.Font('assets/data/font/ofont.ru_Driagwa.ttf', size=50)  # Деньги\r\n    info_font = pygame.freetype.Font('assets/data/font/ofont.ru_Driagwa.ttf', size=25)  # Поле для информации об юните\r\n    hp_font = pygame.freetype.Font('assets/data/font/ofont.ru_Driagwa.ttf', size=50)  # Хп\r\n\r\n    # Настройки текста информации\r\n    info_text = ''\r\n    line_spacing = 10  # Расстояние между строками\r\n    x, y, coord_info_text = None, None, None\r\n\r\n    # Словарь для выбора юнита\r\n    unit_mapping = {\r\n        pygame.K_1: Archer,\r\n        pygame.K_2: Knight,\r\n        pygame.K_3: Wizard,\r\n        pygame.K_4: Priest,\r\n        pygame.K_5: ArmoredAxeman,\r\n        pygame.K_6: SwordsMan,\r\n        pygame.K_7: KnightTemplar\r\n    }\r\n\r\n    running = True\r\n    while running:\r\n        constant.frame_count += 1\r\n        keys = pygame.key.get_pressed()\r\n\r\n        if keys[pygame.K_LSHIFT]:\r\n            info_text, coord_info_text = show_info(pygame.mouse.get_pos())\r\n            x, y = coord_info_text\r\n\r\n        if keys[pygame.K_e]:\r\n            board.spawn_mob(choice(\r\n                [Slime, Skeleton, Orc, ArmoredOrc, EliteOrc, RiderOrc, ArmoredSkeleton, GreateswordSkeleton,\r\n                 Werebear, Werewolf]))\r\n\r\n        for event in pygame.event.get():\r\n            if event.type == pygame.QUIT:\r\n                screens.terminate()\r\n            if event.type == pygame.MOUSEBUTTONDOWN:\r\n                if event.button == 3:\r\n                    sale_unit(pygame.mouse.get_pos())\r\n                else:\r\n                    for key_code, unit_class in unit_mapping.items():\r\n                        if keys[key_code]:\r\n                            board.get_click(pygame.mouse.get_pos(), unit_class)\r\n                            break\r\n            if event.type == pygame.KEYDOWN:\r\n                if event.key == pygame.K_ESCAPE:\r\n                    screens.main_lobby(True)\r\n            if event.type == pygame.KEYUP:\r\n                if event.key == pygame.K_LSHIFT:\r\n                    info_text, coord_info_text = '', []\r\n            if event.type == SPAWN_WAVE_EVENT:\r\n                wave_manager.start_wave()\r\n\r\n        step_sound_func()\r\n\r\n        screen.blit(static_background, (0, 0))\r\n        entity_drawer()\r\n\r\n        # Если необходимо, то используем фильтр\r\n        if constant.LVL_PARAMS[constant.CURRENT_LVL]['dark_filter']:\r\n            screen.blit(dark_filter, (0, 0))\r\n\r\n        # Спавн мобов волны\r\n        wave_manager.spawn_enemy()\r\n\r\n        # Если необходимо вывести информацию о юните\r\n        if info_text:\r\n            info_drawer(info_text, info_font, x, y, line_spacing)\r\n            x, y = coord_info_text\r\n\r\n        # Монеты/жизни\r\n        system_info_drawer(money_font, hp_font)\r\n\r\n        # Выигрыш/проигрыш\r\n        if constant.GAME_MODE == 'WIN':\r\n            pygame.mixer.Channel(1).play(sounds['game_win'])\r\n            screens.main_lobby(True)\r\n        elif constant.GAME_MODE == 'LOSE':\r\n            pygame.mixer.Channel(1).play(sounds['game_lose'])\r\n            pygame.mixer.Channel(2).stop()\r\n            screens.main_lobby(True)\r\n\r\n        groups['all_sprites'].update()\r\n        pygame.display.flip()\r\n\r\n        clock.tick(FPS)\r\n\r\n\r\nif __name__ == '__main__':\r\n    game_loop()\r\n
===================================================================
diff --git a/Game.py b/Game.py
--- a/Game.py	(revision 897a7a483b7d9ad682ea16f64e3ce309ec5f507f)
+++ b/Game.py	(date 1739872722643)
@@ -10,7 +10,7 @@
 from Units import Archer, Knight, Wizard, Priest, ArmoredAxeman, SwordsMan, KnightTemplar, Lancer
 from Waves_manager import WaveManager
 from constant import FPS, WIDTH, HEIGHT, reset_state, CELL_SIZE, CURRENT_LVL
-from Board import Board
+from Game_Board import Board
 from map_creator import draw_map, get_objects
 from sale_func import sale_unit
 from shop_units import Shop
@@ -239,11 +239,11 @@
         # Выигрыш/проигрыш
         if constant.GAME_MODE == 'WIN':
             pygame.mixer.Channel(1).play(sounds['game_win'])
-            screens.main_lobby(True)
+            screens.win_screen()
         elif constant.GAME_MODE == 'LOSE':
             pygame.mixer.Channel(1).play(sounds['game_lose'])
             pygame.mixer.Channel(2).stop()
-            screens.main_lobby(True)
+            screens.lose_screen()
 
         groups['all_sprites'].update()
         pygame.display.flip()
